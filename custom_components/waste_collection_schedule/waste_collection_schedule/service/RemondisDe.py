#!/usr/bin/env python3

import json
from datetime import datetime

import requests
import string
import sys

API_BASE="https://remondis.atino.net/api"

class RemondisDe:
    def __init__(self, city, postalCode, street, streetNumber):
        # TODO check if already registered
        self._registerDevice(city, postalCode, street, streetNumber)

    def _autocomplete(self, city, postalCode, street, streetNumber):
        params={'city': city, 'postalCode': postalCode, 'street': street, 'houseNumber': streetNumber}
        r = requests.get(f"{API_BASE}/autocomplete", params=params);
        return r.json()

    def _registerDevice(self, city, postalCode, street, streetNumber):
        addr = self._autocomplete(city, postalCode, street, streetNumber)
        if addr['valid'] == False:
            ok = True
            if len(addr['city']) == 1:
                city = addr['city'][0]
            else:
                ok = False
            if len(addr['postalCode']) == 1:
                postalCode = addr['postalCode'][0]
            else:
                ok = False
            if len(addr['street']) == 1:
                street = addr['street'][0]
            else:
                ok = False
            if not ok:
                raise Exception(f"Invalid address: city={city}, postalCode={postalCode}, street={street}, streetNumber={streetNumber}")
        r = requests.post(
            f"{API_BASE}/devices", 
            json={'city': city, 'postalCode': postalCode, 'street': street, 'houseNumber': streetNumber},
            headers={'Content-Type': 'application/json; charset=UTF-8'}
        );
        resp = r.json()
        if not 'id' in resp:
            raise Exception(f"Failed to register device: {resp}")
        self._device_id = resp['id']

    def fetchSchedule(self):
        headers={'device': self._device_id}
        r = requests.get(f"{API_BASE}/pickup-schedule", headers=headers);
        schJson = r.json()
        garbage = {}
        for item in schJson:
            bin = item['bin']['name']
            garbage[bin] = {"dates": [], "image": f"https://remondis.atino.net/uploads/images/{item['bin']['image']}"}
            for date in item['nextDates']:
                garbage[bin]['dates'].append(datetime.strptime(date, "%Y-%m-%d").date())
        return garbage

ignoreCities = set(["Krefeld"]); # Krefeld does not seem to work

def getAllCitiesAndDistricts():
    cities = set()
    for letter in string.ascii_uppercase:
        params={'city': letter, 'postalCode': "", 'street': "", 'houseNumber': ""}
        r = requests.get(f"{API_BASE}/autocomplete", params=params)
        res = r.json()
        if 'city' not in res:
            print(f"Failed to fetch cities starting with {letter}: {res}", file=sys.stderr)
            continue
        cities.update(res['city'])
    for city in ignoreCities:
        cities.discard(city)
    return cities

def filterOnlyCities(cities):
    # filter out districts and villages within a city
    districts = list(filter(lambda k: '(' in k, cities))
    cities = set(filter(lambda k: '(' not in k, cities))
    for district in districts:
        city = district.split(' (')[1]
        cities.add(city[:-1])
    return cities

def generateTestCases(cities):
    print("\n\n# Generated by generateTestCases in RemondisDe.py")
    print("TEST_CASES = {")
    for city in cities:
        params={'city': city, 'postalCode': "", 'street': "", 'houseNumber': ""}
        r = requests.get(f"{API_BASE}/autocomplete", params=params)
        res = r.json()
        params['postalCode'] = res['postalCode'][0]
        r = requests.get(f"{API_BASE}/autocomplete", params=params)
        res = r.json()
        postalCode = res['postalCode'][0]
        street = res['street'][0]
        
        print(f'    "{city}": {{"city": "{city}", "postalCode": "{postalCode}", "street": "{street}", "streetNumber": "1"}},')
    print("}")

def generate_data():
    cities = getAllCitiesAndDistricts()
    print(cities)
    generateTestCases(cities)

if __name__ == "__main__":
    generate_data()
